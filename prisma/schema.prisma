// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AccountRoleType {
  CUSTOMER
  ADMIN
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String          @unique
  mobileNumber  String          @unique
  imageUrl      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isActive      Boolean         @default(true)
  role          AccountRoleType @default(CUSTOMER)
  deletedAt     DateTime?
  userAddresses UserAddress[]
  bookmarks     Bookmark[]
  bookings      Booking[]
  reviews       Review[]
  authToken     AuthToken[]
}

model UserAddress {
  id           Int       @id @default(autoincrement())
  userId       Int
  addressLabel String
  addressLine1 String
  addressLine2 String?   @default("")
  city         String
  country      String    @default("IN")
  postcode     String
  mobileNumber String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  booking      Booking[]

  @@index([userId])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  vendorId  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@unique([userId, vendorId])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  vendors Vendor[]
}

model Vendor {
  id            Int            @id @default(autoincrement())
  name          String
  price         Float
  categoryId    Int
  mobileNumber  String
  isAvailable   Boolean        @default(true)
  email         String?
  services      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  deletedAt     DateTime?
  category      Category       @relation(fields: [categoryId], references: [id])
  vendorAddress VendorAddress?
  vendorImages  VendorImage[]
  bookings      Booking[]
  reviews       Review[]
  bookmarks     Bookmark[]

  @@index([name, categoryId])
}

model VendorAddress {
  id           Int      @id @default(autoincrement())
  vendorId     Int      @unique
  addressLine1 String
  addressLine2 String?
  city         String
  country      String   @default("IN")
  postcode     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
}

model VendorImage {
  id        Int     @id @default(autoincrement())
  vendorId  Int
  vendor    Vendor  @relation(fields: [vendorId], references: [id])
  imageUrl  String
  isPrimary Boolean @default(false)

  @@index([vendorId, isPrimary])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED_USER
  CANCELLED_VENDOR
  JUNK
}

model Booking {
  id          Int           @id @default(autoincrement())
  userId      Int
  addressId   Int
  vendorId    Int
  amount      Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  bookingDate DateTime?
  message     String?
  user        User          @relation(fields: [userId], references: [id])
  address     UserAddress   @relation(fields: [addressId], references: [id])
  vendor      Vendor        @relation(fields: [vendorId], references: [id])
  reviews     Review[]
  Payment     Payment[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?       @unique
  paymentDate   DateTime      @default(now())
  booking       Booking       @relation(fields: [bookingId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  vendorId  Int?
  bookingId Int?
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  Vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  Booking   Booking? @relation(fields: [bookingId], references: [id])
}
